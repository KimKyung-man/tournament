{"version":3,"sources":["webpack:///./scripts/index.js","webpack:///./entry.js","webpack:///./styles/style.scss?2805","webpack:///./scripts/model.js"],"names":[],"mappings":";;;;;sDAAA,uEAEA,KAEA,6CAYA,KAAM,EAAO,GAAI,OAChB,CACA,WACA,aAAO,cAEP,KAAwB,OACvB,IAGC,GAiBD,SAhBE,cAAS,CACR,EAAO,QAAQ,EAAO,OAAuB,CAAf,GAAO,MAAa,GAClD,EAAO,QAAQ,EAAO,OAAuB,CAAf,GAAO,MAIvC,IACC,uBAAS,EAAO,QAAQ,EAAO,OAK/B,OAGF,MAGD,MAA+B,WAE9B,IAGA,OAAiB,OAAb,KAEH,MAAM,GAAsC,CAA9B,KAAS,iBAErB,oBAAW,EAA0B,2BAAU,EAAO,MAAU,CAElE,KAAS,MAGT,gBAAS,QAAQ,QAAiB,OACjC,GAAiB,WAAO,aAAuB,kBAAS,EAAY,IAEpE,MAAoB,cAAO,gBAE3B,SAAoB,cAAO,aAAa,MAAO,EAAO,IACtD,OAAoB,cAAO,aAAa,QAAS,EAAO,IACxD,SAAoB,cAAO,aAAa,SAAU,EAAO,IACzD,UAAoB,cAAO,aAAqB,qBAAc,EAAY,IAE1E,MAA2B,qBAAO,YAAc,EAChD,IAGD,KAAS,QAAQ,UAAU,OAAO,SAA2B,CAAjB,KAAO,OACnD,CADkE,KAAO,MAI1E,CACA,QAaF,IAOA,KAAM,GAAY,CAAC,CAAmB,gBAEpC,GAQC,CADG,GAAK,QACH,OAEL,KAAK,OACL,IAAK,MAAS,EAAK,iBAAmB,EAGxC,GAdK,EAAK,MAAS,EAAK,iBAAmB,EACzC,IAAK,OAEL,KAAK,OACL,IAAK,MAGN,EAcF,EAAM,EAAgB,KAGrB,MAAM,GAAkB,SAAS,cAAc,sBAAsB,QAAQ,SAE7E,GAAM,EAAa,EAAgB,cACnC,OAAM,EAAoB,EAAgB,cAE1C,gBAAW,aAAa,MAAO,EAAS,IACxC,OAAW,aAAa,QAAS,EAAS,IAC1C,SAAW,aAAa,SAAU,EAAS,IAC3C,UAAW,aAAqB,qBAAc,EAAc,IAC5D,MAAW,aAAa,QAAS,EAEjC,QAAkB,YAAc,EAEhC,OAAS,UAAU,UACnB,KAAS,UACT,cAOD,EAAM,EAAW,KAChB,MAAM,CAAE,QAAO,QAGf,4BACC,EADG,SAMJ,aAAK,QAAQ,EAEb,QACA,IAKD,EAAM,EAAS,IAGd,GAAU,CACV,SAKD,EAAM,EAAO,SAEZ,MAAM,GAAQ,KAAM,WAAM,SAAS,EAEnC,aAAS,UAAY,SAAS,cAE9B,mBAAM,GAAe,SAAS,cAAc,mBAAmB,QAAQ,SAEvE,KAAS,QAAU,EAAa,cAChC,eAAS,MAAQ,EAAa,cAC9B,kBAAS,QAAU,EAAa,iBAChC,aAAS,WAAa,EAAa,iBACnC,iBAAS,kBAAoB,EAAa,iBAG1C,0BAAK,GAAI,GAAI,EAAQ,UAAe,CAAJ,GAAO,GACtC,IAAK,QAGN,WAAK,QAAQ,GAAG,KAGhB,QAAS,QAAQ,QAAwB,OACxC,GAAc,iBAAiB,QAAU,KACxC,GACA,mBAAM,cAEN,SAAQ,EACR,WACD,EAED,KAAS,QAAQ,iBAAiB,QAAU,KAC3C,GACA,mBAAM,cAEN,OACA,GAGD,KAAK,MACL,IAAK,MAEL,IAAS,UAAU,UACnB,KAAS,UACT,cA5CD,EA8CA,OAAO,iBAAiB,OAAQ,IAAM,wCC1NtC,UAEA,E,wBCFA,oFCAA,KAsBM,uDAuBS,CAAE,SAvBC,KACjB,OAYiC,KAAK,WAVtC,MAAM,CAAE,QAAO,UAAW,EAC1B,IAAM,EAAa,OAEnB,qBAAK,GAAI,GAAI,EAAO,IAAM,GAAK,EAC9B,MAAM,GAAK,EAEX,IAAO,KACN,CACA,UAAmB,UAAZ,CACP,OACC,gCAA6D,QAAQ,EAA2B,IAAa,WAAvG,CACN,GACA,QAGF,WAED,CACA,QArBD","file":"main.e5ca7bba8bce256857b5.js","sourcesContent":["import model from '~/scripts/model'\n\nconst options = process.env.CONFIG\n\nconst elements = {}\n\n/**\n * Data of the tournament and current match.\n * The view will be updated automatically when its `match` property is changed. (one-way binding)\n *\n * @property {player[][]} results          - Every winners of each matches.\n * @property {number}     round            - Current round. (start at 0)\n * @property {number}     match            - Current match of the round. (start at 0)\n * @property {player[]}   players          - (getter) Current 2 players.\n * @property {number}     competitorsCount - (getter) Competitors of current round.\n */\nconst data = new Proxy({\n\tresults: [],\n\tround: undefined,\n\tmatch: undefined,\n}, {\n\tget: (target, property, receiver) => {\n\t\tlet result\n\n\t\tswitch (property) {\n\t\t\tcase 'players':\n\t\t\t\tresult = [\n\t\t\t\t\ttarget.results[target.round][(target.match * 2) + 0],\n\t\t\t\t\ttarget.results[target.round][(target.match * 2) + 1],\n\t\t\t\t]\n\n\t\t\t\tbreak\n\t\t\tcase 'competitorsCount':\n\t\t\t\tresult = target.results[target.round].length\n\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\t// The default behavior\n\t\t\t\tresult = target[property]\n\t\t}\n\n\t\treturn result\n\t},\n\n\tset: (target, property, value, receiver) => {\n\t\t// The default behavior\n\t\ttarget[property] = value // eslint-disable-line no-param-reassign\n\n\t\t// Update the view\n\t\tif (property === 'match') {\n\t\t\t// Update the title\n\t\t\tconst title = receiver.competitorsCount === 2 ?\n\t\t\t\t'Final' :\n\t\t\t\t`Round of ${receiver.competitorsCount}, Match ${target.match + 1}`\n\n\t\t\telements.title.textContent = title\n\n\t\t\t// Update the players\n\t\t\treceiver.players.forEach((player, index) => {\n\t\t\t\telements.players[index].setAttribute('title', `Choose ${player.name}`)\n\n\t\t\t\telements.playerImgs[index].removeAttribute('src') // TODO: Improve UX\n\n\t\t\t\telements.playerImgs[index].setAttribute('src', player.img.url)\n\t\t\t\telements.playerImgs[index].setAttribute('width', player.img.width)\n\t\t\t\telements.playerImgs[index].setAttribute('height', player.img.height)\n\t\t\t\telements.playerImgs[index].setAttribute('alt', `An image of ${player.name}`)\n\n\t\t\t\telements.playerFigcaptions[index].textContent = player.name\n\t\t\t})\n\n\t\t\t// Toggle the back button\n\t\t\telements.backBtn.classList.toggle('hidden', target.round === 0 && target.match === 0)\n\t\t}\n\n\t\t// Indicate success\n\t\treturn true\n\t},\n})\n\n/**\n * Expose some variables for debug.\n * This block will be eliminated from production bundle.\n */\nif (process.env.NODE_ENV === 'development') {\n\twindow.t = {\n\t\tdata,\n\t}\n}\n\n/**\n * Load the next or the previous match.\n *\n * @param {object}  options\n * @param {boolean} options.prev - Load previous match if truthy,\n *                                 load next match if falsy.\n */\nconst loadMatch = ({ prev = false } = {}) => {\n\tif (!prev) {\n\t\tif (data.match < (data.competitorsCount / 2) - 1) {\n\t\t\tdata.match += 1\n\t\t} else {\n\t\t\tdata.round += 1\n\t\t\tdata.match = 0\n\t\t}\n\t} else {\n\t\tif (data.match > 0) { // eslint-disable-line no-lonely-if\n\t\t\tdata.match -= 1\n\t\t} else {\n\t\t\tdata.round -= 1\n\t\t\tdata.match = (data.competitorsCount / 2) - 1\n\t\t}\n\t}\n}\n\n/**\n * Show the champion.\n *\n * @param {player} champion - The champion.\n */\nconst showChampion = (champion) => {\n\tconsole.log(champion)\n\n\tconst championElement = document.querySelector('#champion-template').content.children[0]\n\n\tconst imgElement = championElement.querySelector('img')\n\tconst figcaptionElement = championElement.querySelector('figcaption')\n\n\timgElement.setAttribute('src', champion.img.url)\n\timgElement.setAttribute('width', champion.img.width)\n\timgElement.setAttribute('height', champion.img.height)\n\timgElement.setAttribute('alt', `An image of ${champion.name}`)\n\timgElement.setAttribute('title', champion.name)\n\n\tfigcaptionElement.textContent = champion.name\n\n\telements.container.innerHTML = ''\n\telements.container.appendChild(championElement)\n}\n\n/**\n * Advance the winner to the next round and load the next match.\n *\n * @param {player} winner - The winner of current match.\n */\nconst advance = (winner) => {\n\tconst { round, match, competitorsCount } = data\n\n\t// Champion\n\tif (competitorsCount === 2) {\n\t\tshowChampion(winner)\n\n\t\treturn\n\t}\n\n\tdata.results[round + 1][match] = winner\n\n\tloadMatch()\n}\n\n/**\n * Go back and load the previous match.\n */\nconst goBack = () => {\n\t// TODO: Remove the last winner from `results`\n\n\tloadMatch({ prev: true })\n}\n\n/**\n * Initiate the tournament.\n */\nconst init = async () => {\n\t// Get the entry from API.\n\tconst entry = await model.getEntry(options.entrySize)\n\n\telements.container = document.querySelector('#container')\n\n\tconst matchElement = document.querySelector('#match-template').content.children[0]\n\n\telements.backBtn = matchElement.querySelector('#back-btn')\n\telements.title = matchElement.querySelector('#match-title')\n\telements.players = matchElement.querySelectorAll('.player')\n\telements.playerImgs = matchElement.querySelectorAll('.player img')\n\telements.playerFigcaptions = matchElement.querySelectorAll('.player figcaption')\n\n\t// Prepare rounds and register the players\n\tfor (let i = options.entrySize; i > 1; i /= 2) {\n\t\tdata.results.push([])\n\t}\n\n\tdata.results[0].push(...entry)\n\n\t// Bind events\n\telements.players.forEach((playerElement, index) => {\n\t\tplayerElement.addEventListener('click', (event) => {\n\t\t\tevent.preventDefault()\n\t\t\tevent.currentTarget.blur()\n\n\t\t\tadvance(data.players[index])\n\t\t})\n\t})\n\n\telements.backBtn.addEventListener('click', (event) => {\n\t\tevent.preventDefault()\n\t\tevent.currentTarget.blur()\n\n\t\tgoBack()\n\t})\n\n\t// Start the tournament\n\tdata.round = 0\n\tdata.match = 0\n\n\telements.container.innerHTML = ''\n\telements.container.appendChild(matchElement)\n}\n\nwindow.addEventListener('load', () => init())\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/index.js","import '~/styles/style.scss'\n\nimport '~/scripts'\n\n\n\n// WEBPACK FOOTER //\n// ./entry.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./styles/style.scss\n// module id = Xkzt\n// module chunks = 0","const options = process.env.CONFIG\n\n/**\n * A player of the tournament.\n *\n * @typedef  {Object} player     - A player.\n *\n * @property {number} id         - Player's identifier.\n * @property {string} name       - Player's name.\n * @property {Object} img        - Player's image.\n * @property {string} img.url    - Url of the image.\n * @property {number} img.width  - Width of the image. (in pixel)\n * @property {number} img.height - Height of the image. (in pixel)\n */\n\n/**\n * Mock API that returns the entry.\n *\n * @param   {number}   size - Entry size.\n *\n * @returns {player[]}      - The entry.\n */\nconst getEntry = (size) => {\n\tconst result = []\n\n\tconst { width, height } = options.img\n\tconst pixelRatio = window.devicePixelRatio\n\n\tfor (let i = 0; i < size; i += 1) {\n\t\tconst id = i + 1\n\n\t\tresult.push({\n\t\t\tid,\n\t\t\tname: `Player ${id}`,\n\t\t\timg: {\n\t\t\t\turl: `https://picsum.photos/${Math.round(width * pixelRatio)}/${Math.round(height * pixelRatio)}/?image=${id}`,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t},\n\t\t})\n\t}\n\n\treturn result\n}\n\nexport default { getEntry }\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/model.js"],"sourceRoot":""}